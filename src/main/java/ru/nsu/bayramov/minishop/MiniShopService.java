package main.java.ru.nsu.bayramov.minishop;import main.java.ru.nsu.bayramov.minishop.exceptions.WrongCommandException;import main.java.ru.nsu.bayramov.minishop.exceptions.WrongProductInfoException;import java.io.*;import java.net.URL;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;public class MiniShopService {    private final String PATH_TO_CSV = "products.csv";    private String lastName, firstName, secondName;    private Date date;    private SimpleDateFormat formatForDateNow;    private int orderNumber;    private double totalSum;    private List<Product> products;    public MiniShopService() {        lastName = firstName = secondName = null;        date = new Date();        formatForDateNow = new SimpleDateFormat("dd.MM.yyyy");        orderNumber = 0;        totalSum = 0;        products = new ArrayList<>();    }    public void start() throws IOException, WrongProductInfoException  {        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {            initFullName(reader);            initProducts();            String commandLine;            while (true) {                commandLine = reader.readLine();                if (commandLine.equalsIgnoreCase("Exit")) return;                try {                    handleCommandLine(commandLine);                } catch (WrongCommandException ex) {                    System.out.println(ex.getMessage());                }            }        }    }    private void initFullName(BufferedReader reader) throws IOException {        System.out.println("Type your last name");        lastName = reader.readLine();        System.out.println("Type your first name");        firstName = reader.readLine();        System.out.println("Type your second name");        secondName = reader.readLine();        System.out.println("Welcome to our store! Have a nice shopping!");    }    private void initProducts() throws IOException, WrongProductInfoException {        try (BufferedReader csvReader = new BufferedReader(new FileReader(getFileFromResources(PATH_TO_CSV)))) {            String row;            while ((row = csvReader.readLine()) != null) {                String[] data = row.split(";");                try {                    products.add(new Product(data));                } catch (NumberFormatException ex) {                    throw new WrongProductInfoException("Wrong product info");                }            }        }    }    private File getFileFromResources(String fileName) {        ClassLoader classLoader = getClass().getClassLoader();        URL resource = classLoader.getResource(fileName);        if (resource == null) {            throw new IllegalArgumentException("File is not found!");        } else {            return new File(resource.getFile());        }    }    private void handleCommandLine(String commandLine) throws IOException, WrongCommandException {        String[] splitCommandline = commandLine.split(" ");        if (commandLine.equalsIgnoreCase("show products")) {            showProducts();        } else if (commandLine.equalsIgnoreCase("show basket")) {            showBasket();        } else if (splitCommandline.length == 2) {            try {                changeAcquiredNum(splitCommandline[0], Integer.parseInt(splitCommandline[1]));            } catch (NumberFormatException ex) {                throw new WrongCommandException("Wrong amount");            }        } else if (commandLine.equalsIgnoreCase("complete")) {            complete();        } else {            throw new WrongCommandException("\"" + commandLine + "\"" + " is wrong command");        }    }    private void changeAcquiredNum(String name, int num) throws WrongCommandException {        for (Product product : products) {            if (product.getName().equalsIgnoreCase(name)) {                product.setAcquiredNum(num);                totalSum += (product.getPrice()*num);            }        }    }    private void showProducts() {        System.out.format("%-15s%-15s%-15s\n", "Продукт", "Цена", "Количество");        for (Product product : products) {            System.out.format("%-15s%-15s%-15s\n", product.getName(), product.getPrice(), product.getNumInStock());        }    }    private void showBasket() {        System.out.println("Заказ №" + orderNumber + " " + lastName + " " + firstName + " " + secondName +                " " + formatForDateNow.format(date));        System.out.format("%-15s%-15s%-15s%-15s%-15s\n", "Номер", "Название", "Цена", "Количество", "Сумма");        for (int i = 0; i < products.size(); i++) {            if (products.get(i).getAcquiredNum() != 0) {                System.out.format("%-15d%-15s%-15s%-15s%-15s\n", i, products.get(i).getName(), products.get(i).getPrice(),                        products.get(i).getAcquiredNum(), products.get(i).getPrice()*products.get(i).getAcquiredNum());            }        }        System.out.println("Итого: " + totalSum);    }    private void complete() throws IOException {        String dirPath1 = lastName + "_" + firstName + "_" + secondName;        String dirPath2 =  dirPath1 + "/" + formatForDateNow.format(date);        Path userPath1 = Paths.get(dirPath1);        Path userPath2 = Paths.get(dirPath2);        if (!Files.exists(userPath1)) {            Files.createDirectory(userPath1);        }        if (!Files.exists(userPath2)) {            Files.createDirectory(userPath2);        }        Files.deleteIfExists(Paths.get(dirPath2 + "/" + orderNumber + ".csv"));        Files.createFile(Paths.get(dirPath2 + "/" + orderNumber + ".csv"));        try (BufferedWriter csvWriter = new BufferedWriter(new FileWriter(dirPath2 + "/" + orderNumber + ".csv"))) {            csvWriter.append("Номер");            csvWriter.append(";");            csvWriter.append("Название");            csvWriter.append(";");            csvWriter.append("Цена");            csvWriter.append(";");            csvWriter.append("Количество");            csvWriter.append(";");            csvWriter.append("Сумма");            csvWriter.append("\n");            for (int i = 0; i < products.size(); i++) {                if (products.get(i).getAcquiredNum() != 0) {                    csvWriter.append(String.join(";",String.valueOf(i), products.get(i).getName(), String.valueOf(products.get(i).getPrice()),                            String.valueOf(products.get(i).getAcquiredNum()), String.valueOf(products.get(i).getPrice()*products.get(i).getAcquiredNum())));                    csvWriter.append("\n");                }            }            csvWriter.append("\n");            csvWriter.append(String.valueOf(totalSum));        }        clear();    }    private void clear() {        orderNumber++;        products.clear();    }}